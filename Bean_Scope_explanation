Skip to content
Chat history

You said:
Gm
ChatGPT said:
Good morning ☀️🙂
How’s your day starting?

You said:
What is Bean Scope in spring framework please explain with simple real time example along with its use
ChatGPT said:
Great question 👍 Let’s break Bean Scope in Spring Framework down in very simple words with a real-life example.

🔹 What is Bean Scope in Spring?
In Spring, when you create a bean (an object managed by Spring), the scope decides:
👉 How long that bean will live
👉 How many instances of it will be created
👉 Who can use that bean (same object or new object each time)

Think of it as the lifecycle and visibility of a bean.

🔹 Common Bean Scopes in Spring
Singleton (default) – Only one instance of the bean is created and shared across the whole Spring container.

Prototype – A new instance is created every time you request the bean.

Request – One bean per HTTP request (used in web apps).

Session – One bean per HTTP session.

Application – One bean per web application (ServletContext).

🔹 Simple Real-Life Example
Imagine you are running a coffee shop ☕:

Singleton scope –
You keep one coffee machine in the shop. Everyone (all customers) uses the same machine to make coffee.
✅ Saves resources but shared by all.

Prototype scope –
Every customer gets a separate coffee cup. A new cup is given each time someone orders.
✅ Each request → new object.

Request scope (Web App) –
When a customer comes to your coffee shop, you give them a new order slip (valid only for that request).
✅ One slip per HTTP request.

Session scope (Web App) –
If a customer stays in the shop for 1 hour, you give them a session card. They use the same card until they leave.
✅ One bean per user session.

🔹 Spring Code Example
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

// Singleton bean (default)
@Component
@Scope("singleton")
public class CoffeeMachine {
    public CoffeeMachine() {
        System.out.println("CoffeeMachine created");
    }
}

// Prototype bean
@Component
@Scope("prototype")
public class CoffeeCup {
    public CoffeeCup() {
        System.out.println("New CoffeeCup created");
    }
}
Usage in Service
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class CoffeeService {

    @Autowired
    private CoffeeMachine coffeeMachine;  // Singleton - same machine always

    @Autowired
    private CoffeeCup coffeeCup;          // Prototype - new cup each time

    public void serveCoffee() {
        System.out.println("Using " + coffeeMachine + " with " + coffeeCup);
    }
}
🔹 Real Use Cases
Singleton scope (default)

Database connection pool bean

Logging service

Configuration beans

Prototype scope

A shopping cart item object (new for each request)

Temporary calculation objects

Request scope

Login request handler

Request-specific user data

Session scope

User session info (shopping cart across multiple requests)

👉 So in short:

Use singleton when you want a shared, reusable object (most common).

Use prototype when each user/action needs a fresh object.

Use request/session in web apps for per-request or per-session data.

Would you like me to also show you a Spring Boot REST API example where request and session scoped beans are used (so it feels more real-world)?

You said:
Please show diff between singleton vs prototype with example 
ChatGPT said:
Perfect 👍 Let’s compare Singleton vs Prototype bean scope in Spring with side-by-side explanation and example.

🔹 Singleton vs Prototype
Aspect	Singleton	Prototype
Definition	Only one instance of the bean is created and shared throughout the Spring container.	A new instance is created every time the bean is requested.
Default?	✅ Yes, default scope in Spring	❌ No, must be explicitly set
When used?	When you need a shared service or resource (e.g., DB connection, logger, cache).	When you need a fresh object each time (e.g., temporary calculation, shopping cart item).
Memory	Less memory (only one object created).	More memory (many objects created).
Lifecycle	Created at container startup, destroyed when container stops.	Created on demand, destroyed by Garbage Collector (not Spring).
🔹 Example in Spring Boot
Step 1: Singleton Bean
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component
@Scope("singleton")  // default, can even be omitted
public class SingletonBean {
    public SingletonBean() {
        System.out.println("SingletonBean created");
    }
}
Step 2: Prototype Bean
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component
@Scope("prototype")
public class PrototypeBean {
    public PrototypeBean() {
        System.out.println("PrototypeBean created");
    }
}
Step 3: Service using them
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class BeanService {

    @Autowired
    private SingletonBean singletonBean;

    @Autowired
    private PrototypeBean prototypeBean;

    public void testBeans() {
        System.out.println("SingletonBean instance: " + singletonBean);
        System.out.println("PrototypeBean instance: " + prototypeBean);
    }
}
Step 4: Run Example in a Controller
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class TestController {

    @Autowired
    private BeanService beanService;

    @GetMapping("/test")
    public String test() {
        beanService.testBeans();
        return "Check console for bean scope behavior!";
    }
}
🔹 Output in Console when hitting /test multiple times
First Request:
SingletonBean created
PrototypeBean created
SingletonBean instance: com.example.SingletonBean@1a2b3c
PrototypeBean instance: com.example.PrototypeBean@4d5e6f
Second Request:
PrototypeBean created
SingletonBean instance: com.example.SingletonBean@1a2b3c   // SAME instance
PrototypeBean instance: com.example.PrototypeBean@7f8g9h   // NEW instance
✅ Singleton → same object always
✅ Prototype → new object every time

🔹 Real-Life Analogy
Singleton → Coffee Machine in shop (one machine, everyone uses it).

Prototype → Coffee Cup (new cup every time you order).

Would you like me to also add a diagram (visual flow) showing how Spring reuses Singleton vs creates new Prototype beans? That will make it super clear 🔥




No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.

