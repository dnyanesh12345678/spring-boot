Skip to content
Chat history

You said:
what is BeanLifecycle methods in spring boot java please epxlain for begineers with simple real time example.
ChatGPT said:
Great question 👍 Let’s go step by step in very simple language.

🌱 What is a Bean Lifecycle in Spring Boot?
In Spring, a Bean = an object that is managed by the Spring container.
The Bean Lifecycle means → how a bean is created, initialized, used, and then destroyed.

Think of it like a human life:

👶 Birth (Bean Creation)

🏃 Growing up (Initialization)

👨‍💻 Working/Using (In Context)

☠️ Death (Destruction)

🔄 Bean Lifecycle Phases in Spring Boot
Bean Instantiation (Creation)

Spring creates an object of your class.

Example: new MyService()

Dependency Injection (Populate Properties)

Spring injects values/beans into the object.

Initialization Phase

Spring calls initialization methods (like @PostConstruct or afterPropertiesSet()).

This is where you put setup logic (like opening DB connection, loading cache).

Ready to Use

Bean is available in the ApplicationContext.

Destruction Phase

When application shuts down, Spring calls destruction methods (like @PreDestroy or destroy()).

This is where you release resources (like closing DB connection, stopping threads).

✅ Ways to define Lifecycle methods
1. Using @PostConstruct and @PreDestroy
These are the most commonly used.

import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import org.springframework.stereotype.Component;

@Component
public class MyService {

    public MyService() {
        System.out.println("👶 Bean Constructor: MyService created");
    }

    @PostConstruct
    public void init() {
        System.out.println("🏃 @PostConstruct: Bean is initialized (like connecting to DB)");
    }

    public void doWork() {
        System.out.println("⚡ Bean is working...");
    }

    @PreDestroy
    public void destroy() {
        System.out.println("☠️ @PreDestroy: Bean is being destroyed (like closing DB connection)");
    }
}
2. Using InitializingBean and DisposableBean Interfaces
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.stereotype.Component;

@Component
public class AnotherService implements InitializingBean, DisposableBean {

    @Override
    public void afterPropertiesSet() {
        System.out.println("🏃 InitializingBean: afterPropertiesSet called");
    }

    @Override
    public void destroy() {
        System.out.println("☠️ DisposableBean: destroy called");
    }
}
3. Using @Bean(initMethod, destroyMethod) in Configuration
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class AppConfig {
    
    @Bean(initMethod = "customInit", destroyMethod = "customDestroy")
    public MyBean myBean() {
        return new MyBean();
    }
}

class MyBean {
    public void customInit() {
        System.out.println("🏃 Custom Init Method");
    }
    public void customDestroy() {
        System.out.println("☠️ Custom Destroy Method");
    }
}
🌍 Real Life Example
Imagine you are creating a DatabaseConnection Bean:

When app starts → open DB connection (@PostConstruct)

When app stops → close DB connection (@PreDestroy)

import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import org.springframework.stereotype.Component;

@Component
public class DatabaseConnection {

    @PostConstruct
    public void connect() {
        System.out.println("✅ Connecting to database...");
    }

    public void query() {
        System.out.println("⚡ Executing SQL query...");
    }

    @PreDestroy
    public void disconnect() {
        System.out.println("❌ Closing database connection...");
    }
}
📝 Output when running Spring Boot app
👶 Bean Constructor: MyService created
🏃 @PostConstruct: Bean is initialized (like connecting to DB)
✅ Connecting to database...
⚡ Bean is working...
⚡ Executing SQL query...
☠️ @PreDestroy: Bean is being destroyed (like closing DB connection)
❌ Closing database connection...
👉 So in simple words:
Bean Lifecycle methods allow you to run custom logic when a bean is created (startup tasks) and destroyed (cleanup tasks).

Do you want me to also show you how to test lifecycle methods in a Spring Boot main application (so you can see logs when starting and stopping)?



No file chosenNo file chosen
ChatGPT can make mistakes. Check important info. See Cookie Preferences.

